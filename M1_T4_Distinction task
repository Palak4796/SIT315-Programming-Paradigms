#include <Wire.h>
#include <BH1750.h>
#include <PinChangeInterrupt.h>

// Pin Assignments
#define MOTION_SENSOR_PIN 3
#define ULTRASONIC_TRIG 2
#define ULTRASONIC_ECHO 4
#define LED_MOTION 8
#define LED_PROXIMITY 9
#define LED_AMBIENT 10

// Sensor Instance
BH1750 luxSensor;

// Volatile Flags for Interrupts
volatile bool isMotionDetected = false;
volatile bool isObstaclePresent = false;

// Thresholds for Sensor Readings
#define LUX_THRESHOLD 1200   // Lux limit for turning on Ambient LED
#define PROXIMITY_LIMIT 15   // Distance limit in cm for obstacle detection

// Timer Interrupt Control Variable
volatile bool triggerLuxReading = false;

// Timer Interrupt (Executes every 2 seconds)
ISR(TIMER1_COMPA_vect) {
  triggerLuxReading = true;
}

// PIR Sensor Interrupt Handler
void detectMotion() {
  isMotionDetected = digitalRead(MOTION_SENSOR_PIN);
  delay(50); // Debounce PIR sensor to prevent false triggers
}

void setup() {
  Serial.begin(9600);

  // Configure PIR Sensor
  pinMode(MOTION_SENSOR_PIN, INPUT);
  attachPCINT(digitalPinToPCINT(MOTION_SENSOR_PIN), detectMotion, CHANGE);

  // Configure Ultrasonic Sensor
  pinMode(ULTRASONIC_TRIG, OUTPUT);
  pinMode(ULTRASONIC_ECHO, INPUT);

  // Configure LEDs
  pinMode(LED_MOTION, OUTPUT);
  pinMode(LED_PROXIMITY, OUTPUT);
  pinMode(LED_AMBIENT, OUTPUT);

  // Initialize Light Sensor (SDA - A4, SCL - A3)
  Wire.begin();
  luxSensor.begin(BH1750::CONTINUOUS_HIGH_RES_MODE);
  delay(200); // Allow sensor initialization time

  // Timer1 Configuration (2-second interval)
  cli();
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0;
  OCR1A = 31250;  // 2 seconds (16MHz clock, 1024 prescaler)
  TCCR1B |= (1 << WGM12);
  TCCR1B |= (1 << CS12) | (1 << CS10); // Prescaler 1024
  TIMSK1 |= (1 << OCIE1A);
  sei();

  Serial.println("System Ready");
}

void loop() {
  // Handle PIR-Based Motion Detection
  digitalWrite(LED_MOTION, isMotionDetected);
  if (isMotionDetected) {
    Serial.println("Movement Detected!");
  }

  // Handle Ultrasonic-Based Obstacle Detection
  digitalWrite(ULTRASONIC_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(ULTRASONIC_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(ULTRASONIC_TRIG, LOW);

  long pulseDuration = pulseIn(ULTRASONIC_ECHO, HIGH, 30000); // Timeout for safety
  float measuredDistance = pulseDuration * 0.034 / 2; // Convert time to distance in cm

  isObstaclePresent = (measuredDistance > 0 && measuredDistance < PROXIMITY_LIMIT);
  digitalWrite(LED_PROXIMITY, isObstaclePresent);
  if (isObstaclePresent) {
    Serial.println("Nearby Object Detected!");
  }

  // Handle Light Sensor Readings
  float lightLevel = luxSensor.readLightLevel();
  Serial.print("Brightness: ");
  Serial.print(lightLevel);
  Serial.println(" lx");

  digitalWrite(LED_AMBIENT, lightLevel > LUX_THRESHOLD); // Turn on if dark

  delay(500); // Delay to stabilize readings
}
