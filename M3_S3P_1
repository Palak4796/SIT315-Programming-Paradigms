#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <CL/cl.h>

#define PRINT 1
int SZ = 100000000;

int *v1, *v2, *v_out;

cl_mem bufV1, bufV2, bufV_out;
cl_device_id device_id;
cl_context context;
cl_program program;
cl_kernel kernel;
cl_command_queue queue;
cl_event event = NULL;
int err;

const char *kernelSource = 
"__kernel void vector_add_ocl(const int size, __global int *v1, __global int *v2, __global int *v_out) {\n"
"    const int globalIndex = get_global_id(0);\n"
"    if (globalIndex < size) {\n"
"        v_out[globalIndex] = v1[globalIndex] + v2[globalIndex];\n"
"    }\n"
"}\n";

cl_device_id create_device();
void setup_openCL_device_context_queue_kernel(const char *kernelSource, const char *kernelname);
cl_program build_program(cl_context ctx, cl_device_id dev, const char *source);
void setup_kernel_memory();
void copy_kernel_args();
void free_memory();
void init(int **A, int size);
void print(int *A, int size);

int main(int argc, char **argv) {
    if (argc > 1) {
        SZ = atoi(argv[1]);
    }

    init(&v1, SZ);
    init(&v2, SZ);
    init(&v_out, SZ); 

    size_t global[1] = {(size_t)SZ};

    print(v1, SZ);
    print(v2, SZ);
   
    setup_openCL_device_context_queue_kernel(kernelSource, "vector_add_ocl");
    setup_kernel_memory();
    copy_kernel_args();

    cl_ulong time_start, time_end;
    double total_time;

    clEnqueueNDRangeKernel(queue, kernel, 1, NULL, global, NULL, 0, NULL, &event);
    clWaitForEvents(1, &event);
    clEnqueueReadBuffer(queue, bufV_out, CL_TRUE, 0, SZ * sizeof(int), v_out, 0, NULL, NULL);

    clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_START, sizeof(time_start), &time_start, NULL);
    clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_END, sizeof(time_end), &time_end, NULL);
    total_time = (double)(time_end - time_start) * 1e-6;

    print(v_out, SZ);
    printf("Kernel Execution Time: %f ms\n", total_time);

    free_memory();
    return 0;
}

void init(int **A, int size) {
    *A = (int *)malloc(sizeof(int) * size);
    for (long i = 0; i < size; i++) {
        (*A)[i] = rand() % 100;
    }
}

void print(int *A, int size) {
    if (PRINT == 0) return;
    if (PRINT == 1 && size > 15) {
        for (long i = 0; i < 5; i++) printf("%d ", A[i]);
        printf(" ..... ");
        for (long i = size - 5; i < size; i++) printf("%d ", A[i]);
    } else {
        for (long i = 0; i < size; i++) printf("%d ", A[i]);
    }
    printf("\n----------------------------\n");
}

void free_memory() {
    clReleaseMemObject(bufV1);
    clReleaseMemObject(bufV2);
    clReleaseMemObject(bufV_out);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(queue);
    clReleaseProgram(program);
    clReleaseContext(context);
    free(v1);
    free(v2);
    free(v_out);
}

void copy_kernel_args() {
    clSetKernelArg(kernel, 0, sizeof(int), (void *)&SZ);
    clSetKernelArg(kernel, 1, sizeof(cl_mem), (void *)&bufV1);
    clSetKernelArg(kernel, 2, sizeof(cl_mem), (void *)&bufV2);
    clSetKernelArg(kernel, 3, sizeof(cl_mem), (void *)&bufV_out);
}

void setup_kernel_memory() {
    bufV1 = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);
    bufV2 = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);
    bufV_out = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);

    clEnqueueWriteBuffer(queue, bufV1, CL_TRUE, 0, SZ * sizeof(int), v1, 0, NULL, NULL);
    clEnqueueWriteBuffer(queue, bufV2, CL_TRUE, 0, SZ * sizeof(int), v2, 0, NULL, NULL);
}

void setup_openCL_device_context_queue_kernel(const char *kernelSource, const char *kernelname) {
    device_id = create_device();

    context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &err);
    if (err < 0) {
        perror("Couldn't create a context");
        exit(1);
    }

    program = build_program(context, device_id, kernelSource);

    // âœ… Use OpenCL 1.2 version of queue creation
    queue = clCreateCommandQueue(context, device_id, CL_QUEUE_PROFILING_ENABLE, &err);
    if (err < 0) {
        perror("Couldn't create a command queue");
        exit(1);
    }

    kernel = clCreateKernel(program, kernelname, &err);
    if (err < 0) {
        perror("Couldn't create a kernel");
        exit(1);
    }
}

cl_program build_program(cl_context ctx, cl_device_id dev, const char *source) {
    cl_program program;
    size_t lengths[1] = { strlen(source) };
    const char *sources[1] = { source };
    program = clCreateProgramWithSource(ctx, 1, sources, lengths, &err);
    if (err < 0) {
        perror("Couldn't create the program");
        exit(1);
    }

    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err < 0) {
        size_t log_size;
        char *program_log;
        clGetProgramBuildInfo(program, dev, CL_PROGRAM_BUILD_LOG, 0, NULL, &log_size);
        program_log = (char *)malloc(log_size + 1);
        program_log[log_size] = '\0';
        clGetProgramBuildInfo(program, dev, CL_PROGRAM_BUILD_LOG, log_size + 1, program_log, NULL);
        printf("Build log:\n%s\n", program_log);
        free(program_log);
        exit(1);
    }

    return program;
}

cl_device_id create_device() {
    cl_platform_id platform;
    cl_device_id dev;

    err = clGetPlatformIDs(1, &platform, NULL);
    if (err < 0) {
        perror("Couldn't identify a platform");
        exit(1);
    }

    err = clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 1, &dev, NULL);
    if (err == CL_DEVICE_NOT_FOUND) {
        printf("GPU not found, trying CPU...\n");
        err = clGetDeviceIDs(platform, CL_DEVICE_TYPE_CPU, 1, &dev, NULL);
    }
    if (err < 0) {
        perror("Couldn't access any devices");
        exit(1);
    }

    return dev;
}
